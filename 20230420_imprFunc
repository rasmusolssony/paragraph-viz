sortingLayers2 <- function(x,
                           layers = NULL,
                           return_tokens = TRUE) {
  # If selecting "all" layers, find out number of layers to help indicate layer index later in code
  if (is.null(layers)) {
    layers <- 0:(length(x[[1]][[1]]) - 1)
    n_layers <- length(x[[1]][[1]])
  }

  # Find number of dimensions (where the place differ depending on return_token is TRUE or FALSE)
  if (return_tokens) {
    dimensions <- length(x[[1]][[1]][[1]][[1]][[1]])
    participants <- length(x[[1]])
  } else {
    dimensions <- length(x[[1]][[1]][[1]][[1]])
    participants <- length(x)
  }

  # Loop over the cases in the variable
  variable_x <- purrr::map(seq_len(participants), function(i_in_variable) {

    # Tidy-structure tokens and embeddings
    if (return_tokens) {
      tokens <- purrr::map(x[[2]], ~ .x)
      all_layers <- purrr::map(x[[1]], ~ .x[[layers + 1]])

    } else {
      tokens <- NULL
      all_layers <- x[[layers + 1]]
    }

    # Count number of embeddings within one layer help("dim")
    # token_id <- seq_len(dim(all_layers[[i_in_variable]][[1]][[1]]))
     token_id <- seq_len(length(tokens[[i_in_variable]]))

    layers_list <- purrr::map(#length(all_layers),
      n_layers,
      function(i_layers) {

      i_layers_for_tokens <- all_layers[[i_in_variable]][[i_layers]] # = i_layers = 2

      # Transpose layers and give each column a DimX names help("~")
      layers_4_token <- suppressMessages(
        tibble::as_tibble(t(dplyr::bind_cols(i_layers_for_tokens)),
                          .name_repair = ~ paste0("Dim", seq_along(.)))
      )

      if (return_tokens) {
        tokens_layer_number <- tibble::tibble(tokens[[i_in_variable]],
                                              token_id,
                                              layers[layers != ""][i_layers])
        colnames(tokens_layer_number) <- c("tokens", "token_id", "layer_number")

        # Bind tokens with word embeddings (not selecting <pad>s)
        tokens_lnumber_layers <- dplyr::bind_cols(
          tokens_layer_number,
          layers_4_token[1:nrow(tokens_layer_number),])
        
      } else {
        layer_number <- tibble::tibble(token_id,
                                       layers[layers != ""][i_layers])

        colnames(layer_number) <- c("token_id", "layer_number")

        # Bind tokens with word embeddings (not selecting <pad>s)
        tokens_lnumber_layers <- dplyr::bind_cols(
          layer_number,
          layers_4_token)
      }

      return(tokens_lnumber_layers)
    })
    dplyr::bind_rows(layers_list)
  })

  return(variable_x)
}
texts <- dplyr::bind_rows(Language_based_assessment_data_8[1],
                        Language_based_assessment_data_8[1],
                        Language_based_assessment_data_8[1],
                        Language_based_assessment_data_8[1],
                        Language_based_assessment_data_8[1],
                        Language_based_assessment_data_8[1],
                        Language_based_assessment_data_8[1],
                        Language_based_assessment_data_8[1],
                        Language_based_assessment_data_8[1],
                        Language_based_assessment_data_8[1],
                        Language_based_assessment_data_8[1],
                        Language_based_assessment_data_8[1],
                        Language_based_assessment_data_8[1],
                        Language_based_assessment_data_8[1],
                        Language_based_assessment_data_8[1],
                        Language_based_assessment_data_8[1],
                        Language_based_assessment_data_8[1],
                        Language_based_assessment_data_8[1],
                        Language_based_assessment_data_8[1],
                        Language_based_assessment_data_8[1],
                        Language_based_assessment_data_8[1],
                        Language_based_assessment_data_8[1],
                        Language_based_assessment_data_8[1],
                        Language_based_assessment_data_8[1],
                        Language_based_assessment_data_8[1],
                        Language_based_assessment_data_8[1])
                        
help(textEmbed)
emb1 <- textEmbed(texts, 
                  device = "mps:0", 
                  keep_token_embeddings = FALSE )
comment(emb1)

emb2 <- textEmbed(texts, 
                  device = "cpu", 
                  keep_token_embeddings = FALSE )

comment(emb2)


emb3 <- textEmbed(texts, 
                  device = "mps:0", 
                  keep_token_embeddings = FALSE )
comment(emb3)

emb4 <- textEmbed(texts, 
                  device = "cpu", 
                  keep_token_embeddings = FALSE )

comment(emb4)
